#!/bin/bash

# This script is used to configure Consul.

set -e

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

acl_datacenter=
acl_token=
acl_master_token=
acl_agent_token=
acl_agent_master_token=
server="false"
config_path="{{ consul_conf_dir }}/config.json"
default_data_dir="{{ consul_data_dir }}"
data_dir=
bind_addr=
client_addr=
datacenter=
bootstrap_expect=
node_name=
overwrite="false"
dry_run="false"
ui=""
consul_config="{}"
config_owner="{{ consul_user }}"
config_group="{{ consul_group }}"
retry_join=()

function print_usage {
  echo "Usage: ${SCRIPT_NAME} [OPTIONS]

This script is used to configure Consul by writing to a JSON config file.
It is not meant to drive a full agent configuration, but to configure basic
settings that often change between environments, etc.

By default, if a file already exists at the path specified by --config, the
options provided here will merge with the existing configuration (options
provided here taking taking precedence). This behaviour can be changed with
the --overwrite flag.

Options:
  --acl-datacenter         Datacenter authoritative for ACL information.
  --acl-token              When provided, the agent will use this token when
                           making requests to Consul servers.
  --acl-master-token       Only used for servers in the acl_datacenter
  --acl-agent-token        Used for clients and servers to perform internal
                           operations.
  --acl-agent-master-token Used to access agent endpoints when Consul servers
                           aren't present to validate any tokens.
  --bind                   Address to bind to for internal cluster communications
  --client                 The address used to bind client interfaces
  --config FILE            The full path to the config file to be written/updated.
                           Defaults to ${config_path}.
  --data-dir DIRECTORY     Data directory for the agent to store state. Defaults to
                           ${data_dir}, but only if not present in existing config.
  --datacenter STRING      The datacenter in which the agent is running.
  --node STRING            The name of this node in the cluster.
  --retry-join STRING      Address of another agent to join. Can be specified
                           multiple times. If using cloud auto-join, a quoted
                           string must be provided.
  --server                 Run agent as server.
  --ui                     Enables the built-in web UI server.
  --bootstrap-expect NUM   The number of expected servers in the datacenter.
  --overwrite              Overwrite file rather than merging with existing
                           configuration found in --config.
  --dry-run                Print config to standard output only.

Examples:
  ${SCRIPT_NAME} \\
    --dc us-east-1 \\
    --server \\
    --ui \\
    --bootstrap-expect 3 \\
    --retry-join 10.1.1.10 --retry-join 10.1.1.11

  ${SCRIPT_NAME} \\
    --dc us-west-1 \\
    --node \$(curl -sSL http://169.254.169.254/latest/meta-data/instance-id/) \\
    --bind-addr \$(curl -sSL http://169.254.169.254/latest/meta-data/local-ipv4/) \\
    --client 0.0.0.0 \\
    --retry-join \"provider=aws tag_key=consul_join tag_value=staging\"
  "
}

function log {
  local level="$1"
  local message="$2"
  >&2 echo -e "$(date +"%Y-%m-%d %H:%M:%S") [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  log "INFO" "$1"
}

function log_warn {
  log "WARN" "$1"
}

function log_error {
  log "ERROR" "$1"
}

function assert_not_empty {
  local key="$1"
  local value="$2"
  if [[ -z "$value" ]]; then
    log_error "The value for '$key' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  if [[ ! $(command -v ${1}) ]]; then
    log_error "The binary '$1' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function add_to_consul_config {
  local key="$1"
  local value="$2"

  # match if numeric, boolean or array
  local re="^([0-9]+|true|false|\[.*\])$"
  if [[ "$value" =~ $re ]] ; then
   consul_config="$(echo "$consul_config {\"${key}\": $value}" | jq -s add)"
  else
    consul_config="$(echo "$consul_config {\"${key}\": \"$value\"}" | jq -s add)"
  fi
}

function get_consul_config_value {
  local key="$1"
  echo "$consul_config" | jq -r ".${key} | select (.!=null)"
}

function generate_consul_config {
  local previous_config="{}"

  if [[ "$overwrite" == "false" && -e "$config_path" ]]; then
    log_info "Reading existing configuration from ${config_path}."
    previous_config="$(jq -r "." "$config_path")"
    if [[ -n "$previous_config" ]]; then
      consul_config="$previous_config"
    fi
  else
    log_info "No existing configuration found at ${config_path}, creating new."
    overwrite="true"
  fi

  if [[ "$server" == "true" ]]; then
    add_to_consul_config "server" "true"
    if [[ -n "$bootstrap_expect" ]]; then
      add_to_consul_config "bootstrap_expect" "$bootstrap_expect"
    else
      if [[ -z "$(get_consul_config_value "bootstrap_expect")" ]]; then
        log_warn "Server mode selected but --bootstrap-expect not provided and bootstrap_expect not found in existing config."
      fi
    fi
  else
    consul_config="$(echo "$consul_config" | jq "del(.server, .bootstrap_expect)")"
  fi

{# HACK: Prevent jinja2 from interpreting the {# below as start of comment block #}
  if [ {{ '${#retry_join[@]}' }} -gt 0 ]; then
    add_to_consul_config "retry_join" "$(printf '%s\n' "${retry_join[@]}" | jq -R . | jq -s .)"
  fi

  [[ -n "$acl_datacenter" ]] && add_to_consul_config "acl_datacenter" "$acl_datacenter"
  [[ -n "$acl_token" ]] && add_to_consul_config "acl_token" "$acl_token"
  [[ -n "$acl_master_token" ]] && add_to_consul_config "acl_master_token" "$acl_master_token"
  [[ -n "$acl_agent_token" ]] && add_to_consul_config "acl_agent_token" "$acl_agent_token"
  [[ -n "$acl_agent_master_token" ]] && add_to_consul_config "acl_agent_master_token" "$acl_agent_master_token"
  [[ -n "$data_dir" ]] && add_to_consul_config "data_dir" "$data_dir"
  [[ -n "$bind_addr" ]] && add_to_consul_config "bind_addr" "$bind_addr"
  [[ -n "$client_addr" ]] && add_to_consul_config "client_addr" "$client_addr"
  [[ -n "$datacenter" ]] && add_to_consul_config "datacenter" "$datacenter"
  [[ -n "$node_name" ]] && add_to_consul_config "node_name" "$node_name"
  [[ -n "$ui" ]] && add_to_consul_config "ui" "$ui"

  if [[ -z "$(get_consul_config_value "data_dir")" ]]; then
    log_info "--data-dir not provided and data_dir not found in existing config, using default."
    add_to_consul_config "data_dir" "$default_data_dir"
  fi

  if [[ "$dry_run" == "true" ]]; then
    echo $consul_config | jq "."
  else
    log_info "Creating Consul config file $config_path"
    echo "$consul_config" | jq "." > "$config_path"
    chown "${config_owner}:${config_group}" "$config_path"
    chmod 0640 "$config_path"
  fi
}

function run {
  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --acl-datacenter)
        assert_not_empty "$key" "$2"
        acl_datacenter="$2"
        shift
        ;;
      --acl-token)
        assert_not_empty "$key" "$2"
        acl_token="$2"
        shift
        ;;
      --acl-master-token)
        assert_not_empty "$key" "$2"
        acl_master_token="$2"
        shift
        ;;
      --acl-agent-token)
        assert_not_empty "$key" "$2"
        acl_agent_token="$2"
        shift
        ;;
      --acl-agent-master-token)
        assert_not_empty "$key" "$2"
        acl_agent_master_token="$2"
        shift
        ;;
      --bind)
        assert_not_empty "$key" "$2"
        bind_addr="$2"
        shift
        ;;
      --bootstrap-expect)
        assert_not_empty "$key" "$2"
        bootstrap_expect="$2"
        shift
        ;;
      --client)
        assert_not_empty "$key" "$2"
        client_addr="$2"
        shift
        ;;
      --config)
        assert_not_empty "$key" "$2"
        config_path="$2"
        shift
        ;;
      --data-dir)
        assert_not_empty "$key" "$2"
        data_dir="$2"
        shift
        ;;
      --datacenter)
        assert_not_empty "$key" "$2"
        datacenter="$2"
        shift
        ;;
      --node)
        assert_not_empty "$key" "$2"
        node_name="$2"
        shift
        ;;
      --retry-join)
        assert_not_empty "$key" "$2"
        retry_join+=("$2")
        shift
        ;;
      --server)
        server="true"
        ;;
      --ui)
        ui="true"
        ;;
      --dry-run)
        dry_run="true"
        ;;
      --overwrite)
        overwrite="true"
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_is_installed "jq"
  generate_consul_config
}

run "$@"
