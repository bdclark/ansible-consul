---
- name: set auto client IP
  set_fact:
    auto_client_ip: "{{ ansible_default_ipv4.address if consul_auto_client_iface is none else hostvars[inventory_hostname]['ansible_'+consul_auto_client_iface]['ipv4']['address'] }}"
  when: consul_auto_client_enabled

- name: set auto bind IP
  set_fact:
    auto_bind_ip: "{{ ansible_default_ipv4.address if consul_auto_bind_iface is none else hostvars[inventory_hostname]['ansible_'+consul_auto_bind_iface]['ipv4']['address'] }}"
  when: consul_auto_bind_enabled

- name: include base config settings
  include_vars: config.yml

- name: include TLS config settings
  include_vars: config_tls.yml
  when: consul_key_content is not none and consul_cert_content is not none and consul_ca_content is not none

- name: set consul configuration
  set_fact:
    consul_config: "{{ consul_base_config | combine(consul_config) }}"

- name: create service group
  group:
    name: "{{ consul_group }}"
    system: yes
  when: consul_user_managed

- name: create service user
  user:
    name: "{{ consul_user }}"
    group: "{{ consul_group }}"
    createhome: no
    system: yes
    shell: /bin/false
    comment: Consul service user
  when: consul_user_managed

- name: create conf directories
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ consul_conf_dir_owner }}"
    group: "{{ consul_group }}"
    mode: "{{ consul_conf_dir_mode }}"
  with_items:
    - "{{ consul_conf_dir }}"
    - "{{ consul_conf_dir }}/conf.d"
    - "{{ consul_conf_dir }}/cert"

- name: create data directory
  file:
    state: directory
    path: "{{ consul_data_dir }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0750
    recurse: yes

- name: write config file
  copy:
    content: "{{ consul_config | to_nice_json }}"
    dest: "{{ consul_conf_dir }}/consul.json"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0640
  notify:
    - restart consul

- name: create TLS key
  no_log: true
  copy:
    content: "{{ consul_key_content }}"
    dest: "{{ consul_config.key_file }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0600
  when: consul_key_content is not none

- name: create TLS cert
  no_log: true
  copy:
    content: "{{ consul_cert_content }}"
    dest: "{{ consul_config.cert_file }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0600
  when: consul_cert_content is not none

- name: create TLS CA cert
  no_log: true
  copy:
    content: "{{ consul_ca_content }}"
    dest: "{{ consul_config.ca_file }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0600
  when: consul_ca_content is not none

- name: upstart init script
  template:
    src: "{{ consul_upstart_template }}"
    dest: /etc/init/consul.conf
    owner: root
    group: root
    mode: 0644
  when: consul_init_method == 'upstart' or (consul_init_method is none and ansible_os_family == 'Debian' and ansible_service_mgr == 'upstart')
  register: consul_init_upstart
  notify:
    - restart consul

- name: systemd init script
  template:
    src: "{{ consul_systemd_template }}"
    dest: /etc/systemd/system/consul.service
    owner: root
    group: root
    mode: 0755
  when: consul_init_method == 'systemd' or (consul_init_method is none and ansible_service_mgr == 'systemd')
  register: consul_init_systemd
  notify:
    - reload systemd
    - restart consul

- name: sysv init script
  template:
    src: "{{ consul_sysvinit_template }}"
    dest: /etc/init.d/consul
    owner: root
    group: root
    mode: 0755
  when: consul_init_method == 'sysvinit' or (consul_init_upstart|skipped and consul_init_systemd|skipped)
  register: consul_init_sysvinit
  notify:
    - restart consul

- name: create log directory
  file:
    state: directory
    path: "{{ consul_log_dir }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0755
    recurse: yes
  when: not consul_init_sysvinit|skipped
